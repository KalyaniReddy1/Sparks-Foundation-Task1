# -*- coding: utf-8 -*-
"""predicting_scores.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZ11ajFHRxzCzXivikydLPLyZGqi9ziR

**B.Kalyani Reddy**

Task 1 : Predict the percentage of a student based on the number of study hours
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as mtb

d = {"Hours": [2.5,5.1,3.2,8.5,3.5,1.5,9.2,5.5,8.3,2.7,7.7,5.9,4.5,3.3,1.1,8.9,2.5,1.9,6.1,7.4,2.7,4.8,3.8,6.9,7.8],
     "score": [21,47,27,75,30,20,88,60,81,25,85,62,41,42,17,95,30,24,67,69,30,54,35,76,86]}
df = pd.DataFrame(d)
df.head()

df.shape

df.isnull().sum()

df.dtypes

x = df[['Hours']]
y = df['score']
print(type(x))
print(type(y))

from sklearn.linear_model import LinearRegression
m1 = LinearRegression()   #creating object of LinearRegression

m1.fit(x,y)   #training the model

# Making predictions
y_pred = m1.predict(x) 
print(y_pred)

# R2 score
print(m1.score(x,y))

df["predicted scores"] = y_pred
df.head()

mtb.scatter(df["Hours"],df['score'],color='orange',label = 'Actual data')
mtb.plot(df['Hours'],df['predicted scores'],color='green',label = 'predicted data')
mtb.xlabel('Hours')
mtb.ylabel('Scores')
mtb.legend()
mtb.show()

# predicting score for 9.25 hours
score1 = m1.predict([[9.25]])
print(score1)

# m = coefficient or slope
# c = intercept or constant
m = m1.coef_
c = m1.intercept_
print('Slope or coefficient',m)
print('Intercept or constant',c)

score = m*9.25 + c
print(score)

"""**Score of the student if he studies 9.25 hrs/day is predicted as 92.9098
using simple linear regression**
"""